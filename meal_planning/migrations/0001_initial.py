# Generated by Django 5.2 on 2025-07-24 10:51

import django.core.validators
import django.db.models.deletion
import meal_planning.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('name_clean', models.CharField(db_index=True, max_length=200)),
                ('spoonacular_id', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('calories_per_100g', models.FloatField()),
                ('protein_per_100g', models.FloatField(default=0)),
                ('carbs_per_100g', models.FloatField(default=0)),
                ('fat_per_100g', models.FloatField(default=0)),
                ('fiber_per_100g', models.FloatField(default=0)),
                ('sugar_per_100g', models.FloatField(default=0)),
                ('sodium_per_100g', models.FloatField(default=0)),
                ('micronutrients', models.JSONField(blank=True, default=dict, help_text='Micronutrient data in JSON format')),
                ('category', models.CharField(choices=[('produce', 'Fruits & Vegetables'), ('proteins', 'Meat & Seafood'), ('dairy', 'Dairy & Eggs'), ('grains', 'Grains & Bread'), ('pantry', 'Pantry Staples'), ('condiments', 'Condiments & Sauces'), ('beverages', 'Beverages'), ('snacks', 'Snacks'), ('frozen', 'Frozen Foods'), ('other', 'Other')], default='other', max_length=50)),
                ('dietary_tags', meal_planning.models.CompatibleArrayField(blank=True, default=list, help_text='vegetarian, vegan, gluten-free, etc.')),
                ('allergens', meal_planning.models.CompatibleArrayField(blank=True, default=list)),
                ('enhanced_data', models.JSONField(blank=True, default=dict, help_text='Enhanced nutritional data in JSON format')),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ingredients',
                'indexes': [models.Index(fields=['name_clean'], name='ingredients_name_cl_5cba92_idx'), models.Index(fields=['category'], name='ingredients_categor_ed8c56_idx'), models.Index(fields=['spoonacular_id'], name='ingredients_spoonac_58a08a_idx')],
            },
        ),
        migrations.CreateModel(
            name='MealPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('plan_type', models.CharField(choices=[('daily', 'Daily Plan'), ('weekly', 'Weekly Plan')], default='daily', max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('generation_version', models.CharField(default='1.0', max_length=10)),
                ('ai_model_used', models.CharField(blank=True, max_length=100)),
                ('prompt_strategy', models.TextField(blank=True)),
                ('meal_plan_data', models.JSONField(help_text='Complete meal plan with recipes and timing')),
                ('total_calories', models.FloatField()),
                ('avg_daily_calories', models.FloatField()),
                ('total_protein', models.FloatField()),
                ('total_carbs', models.FloatField()),
                ('total_fat', models.FloatField()),
                ('nutritional_balance_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('variety_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('preference_match_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('is_active', models.BooleanField(default=True)),
                ('user_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('user_feedback', models.TextField(blank=True)),
                ('shopping_list_generated', models.BooleanField(default=False)),
                ('shopping_list_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'meal_plans',
            },
        ),
        migrations.CreateModel(
            name='NutritionLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('total_calories', models.FloatField(default=0)),
                ('total_protein', models.FloatField(default=0)),
                ('total_carbs', models.FloatField(default=0)),
                ('total_fat', models.FloatField(default=0)),
                ('total_fiber', models.FloatField(default=0)),
                ('meals_data', models.JSONField(default=dict, help_text='Breakdown by meal with recipes and portions')),
                ('calorie_deficit_surplus', models.FloatField(default=0)),
                ('macro_balance_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('ai_analysis', models.JSONField(blank=True, default=dict, help_text='AI-generated nutrition insights')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meal_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='meal_planning.mealplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nutrition_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'nutrition_logs',
            },
        ),
        migrations.CreateModel(
            name='NutritionProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dietary_preferences', meal_planning.models.CompatibleArrayField(blank=True, default=list)),
                ('allergies_intolerances', meal_planning.models.CompatibleArrayField(blank=True, default=list)),
                ('cuisine_preferences', meal_planning.models.CompatibleArrayField(blank=True, default=list)),
                ('disliked_ingredients', meal_planning.models.CompatibleArrayField(blank=True, default=list)),
                ('calorie_target', models.PositiveIntegerField(help_text='Daily calorie target in kcal', validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(5000)])),
                ('protein_target', models.FloatField(help_text='Daily protein target in grams', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('carb_target', models.FloatField(help_text='Daily carbohydrate target in grams', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('fat_target', models.FloatField(help_text='Daily fat target in grams', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300)])),
                ('meals_per_day', models.PositiveSmallIntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('snacks_per_day', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('breakfast_time', models.TimeField(default='08:00:00')),
                ('lunch_time', models.TimeField(default='12:30:00')),
                ('dinner_time', models.TimeField(default='19:00:00')),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('advanced_preferences', models.JSONField(blank=True, default=dict, help_text='Advanced user preferences in JSON format')),
                ('spoonacular_user_hash', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='nutrition_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'nutrition_profiles',
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=300)),
                ('summary', models.TextField(blank=True)),
                ('cuisine', models.CharField(blank=True, max_length=100)),
                ('meal_type', models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('snack', 'Snack'), ('dessert', 'Dessert'), ('appetizer', 'Appetizer')], max_length=50)),
                ('servings', models.PositiveSmallIntegerField(default=4)),
                ('prep_time_minutes', models.PositiveIntegerField()),
                ('cook_time_minutes', models.PositiveIntegerField(default=0)),
                ('total_time_minutes', models.PositiveIntegerField()),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20)),
                ('spoonacular_id', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('ingredients_data', models.JSONField(help_text='List of ingredients with quantities in grams/ml')),
                ('instructions', models.JSONField(help_text='Step-by-step cooking instructions')),
                ('calories_per_serving', models.FloatField()),
                ('protein_per_serving', models.FloatField()),
                ('carbs_per_serving', models.FloatField()),
                ('fat_per_serving', models.FloatField()),
                ('fiber_per_serving', models.FloatField(default=0)),
                ('dietary_tags', meal_planning.models.CompatibleArrayField(blank=True, default=list)),
                ('allergens', meal_planning.models.CompatibleArrayField(blank=True, default=list)),
                ('image_url', models.URLField(blank=True)),
                ('source_url', models.URLField(blank=True)),
                ('source_type', models.CharField(choices=[('spoonacular', 'Spoonacular API'), ('ai_generated', 'AI Generated'), ('user_submitted', 'User Submitted'), ('rag_database', 'RAG Database')], max_length=50)),
                ('embedding_vector', models.JSONField(blank=True, help_text='OpenAI embedding vector (1536 dimensions)', null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('rating_avg', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('rating_count', models.PositiveIntegerField(default=0)),
                ('enhanced_data', models.JSONField(blank=True, default=dict, help_text='Enhanced recipe data in JSON format')),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'recipes',
                'indexes': [models.Index(fields=['meal_type'], name='recipes_meal_ty_9dfb93_idx'), models.Index(fields=['cuisine'], name='recipes_cuisine_8e5006_idx'), models.Index(fields=['total_time_minutes'], name='recipes_total_t_e5ed98_idx'), models.Index(fields=['rating_avg'], name='recipes_rating__ef8458_idx'), models.Index(fields=['spoonacular_id'], name='recipes_spoonac_45b82e_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserRecipeRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='meal_planning.recipe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_recipe_ratings',
            },
        ),
        migrations.CreateModel(
            name='IngredientSubstitution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conversion_ratio', models.FloatField(default=1.0)),
                ('context', models.CharField(blank=True, max_length=200)),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('original_ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='substitutions', to='meal_planning.ingredient')),
                ('substitute_ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='substitute_for', to='meal_planning.ingredient')),
            ],
            options={
                'db_table': 'ingredient_substitutions',
                'unique_together': {('original_ingredient', 'substitute_ingredient', 'context')},
            },
        ),
        migrations.AddIndex(
            model_name='mealplan',
            index=models.Index(fields=['user', 'start_date'], name='meal_plans_user_id_ff606f_idx'),
        ),
        migrations.AddIndex(
            model_name='mealplan',
            index=models.Index(fields=['plan_type', 'is_active'], name='meal_plans_plan_ty_8b10c2_idx'),
        ),
        migrations.AddIndex(
            model_name='nutritionlog',
            index=models.Index(fields=['user', 'date'], name='nutrition_l_user_id_5ce262_idx'),
        ),
        migrations.AddIndex(
            model_name='nutritionlog',
            index=models.Index(fields=['date'], name='nutrition_l_date_495720_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='nutritionlog',
            unique_together={('user', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='userreciperating',
            unique_together={('user', 'recipe')},
        ),
    ]
