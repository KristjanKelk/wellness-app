"""
Django settings for wellness_project project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
from decouple import config
import os

BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

#OpenAI api key
OPENAI_API_KEY = config('OPENAI_API_KEY')
AI_INSIGHT_DAILY_LIMIT = 3

# Spoonacular API Configuration (ADD THIS TO YOUR .env FILE)
SPOONACULAR_API_KEY = config('SPOONACULAR_API_KEY')
SPOONACULAR_BASE_URL = 'https://api.spoonacular.com'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    'wellness-app-tx2c.onrender.com',
    'wellness-app-frontend.onrender.com',
    'localhost',
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
]

CSRF_TRUSTED_ORIGINS = [
     'https://wellness-app-tx2c.onrender.com',
     'https://wellness-app-frontend.onrender.com',
     'http://localhost:8080',
     'http://127.0.0.1:8080',
]

# Frontend URL for email links
FRONTEND_URL = config('FRONTEND_URL', 'http://localhost:8080')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'django_celery_beat',
    'django.contrib.sites',

    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'rest_framework_simplejwt',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',

    # My apps
    'users',
    'health_profiles',
    'analytics',
    'meal_planning',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

# Django AllAuth settings
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

# OAuth configuration
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': config('GOOGLE_CLIENT_ID', ''),
            'secret': config('GOOGLE_CLIENT_SECRET', ''),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'github': {
        'APP': {
            'client_id': config('GITHUB_CLIENT_ID', ''),
            'secret': config('GITHUB_CLIENT_SECRET', ''),
            'key': ''
        },
        'SCOPE': [
            'user',
            'email',
        ],
    }
}

ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_LOGIN_METHODS = {'username', 'email'}
ACCOUNT_SIGNUP_FIELDS = ['username*','email*','password1*','password2*']

# CORS settings
CORS_ALLOW_ALL_ORIGINS = False

CORS_ALLOWED_ORIGINS = [
   'https://wellness-app-frontend.onrender.com',
   'https://wellness-app-tx2c.onrender.com',
    'http://localhost:8080',
    'http://127.0.0.1:8080',
]
CORS_ALLOW_CREDENTIALS = True

SESSION_COOKIE_SAMESITE = 'None'
CSRF_COOKIE_SAMESITE    = 'None'
SESSION_COOKIE_SECURE   = True
CSRF_COOKIE_SECURE      = True

# Specify which headers can be included in requests
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]


# CELERY CONFIGURATION
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

# Celery Task Settings
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Celery Beat Scheduler (for periodic tasks)
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Task execution settings
CELERY_TASK_ALWAYS_EAGER = False
CELERY_TASK_EAGER_PROPAGATES = True
CELERY_TASK_IGNORE_RESULT = False

# Health Summary specific settings
HEALTH_SUMMARY_SETTINGS = {
    'AI_MODEL': 'gpt-3.5-turbo-1106',
    'MAX_RETRIES': 3,
    'RETRY_DELAY': 60,
    'NOTIFICATION_ENABLED': True,
    'AUTO_GENERATE_WEEKLY': True,
    'AUTO_GENERATE_MONTHLY': True,
}


# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.AnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '100/minute',
        'anon': '20/minute',
    },
    'DEFAULT_PAGINATION_CLASS': 'utils.pagination.StandardResultsSetPagination',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=14),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',

    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    # Custom claims
    'JTI_CLAIM': 'jti',
    'TOKEN_USER_CLASS': 'users.User',
}

ROOT_URLCONF = 'wellness_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wellness_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME':     config('PGDATABASE'),
        'USER':     config('PGUSER'),
        'PASSWORD': config('PGPASSWORD'),
        'HOST':     config('PGHOST'),
        'PORT':     config('PGPORT', default='5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files for recipe images
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.User'

# Email Settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development
DEFAULT_FROM_EMAIL = 'noreply@wellnessplatform.com'

# ========================================
# NUTRITION FEATURE CONFIGURATIONS
# ========================================

# Spoonacular API endpoints
SPOONACULAR_ENDPOINTS = {
    'search_recipes': '/recipes/complexSearch',
    'recipe_information': '/recipes/{id}/information',
    'ingredient_search': '/food/ingredients/search',
    'ingredient_information': '/food/ingredients/{id}/information',
    'recipe_nutrition': '/recipes/{id}/nutritionWidget.json',
    'generate_meal_plan': '/mealplanner/generate',
    'connect_user': '/users/connect',
    'add_to_meal_plan': '/mealplanner/{username}/items',
    'shopping_list': '/mealplanner/{username}/shopping-list',
}

# Spoonacular API rate limiting (free tier: 150 requests/day)
SPOONACULAR_RATE_LIMIT = {
    'requests_per_day': 150,
    'requests_per_minute': 10,
    'cache_duration': 3600,  # Cache responses for 1 hour
}

# OpenAI Model Configuration for different nutrition tasks
OPENAI_MODEL_CONFIG = {
    'meal_planning': {
        'model': 'gpt-4-turbo-preview',
        'temperature': 0.7,
        'max_tokens': 2000,
    },
    'recipe_generation': {
        'model': 'gpt-4-turbo-preview',
        'temperature': 0.8,
        'max_tokens': 1500,
    },
    'nutrition_analysis': {
        'model': 'gpt-4-turbo-preview',
        'temperature': 0.3,
        'max_tokens': 1000,
    },
    'embeddings': {
        'model': 'text-embedding-3-small',
        'dimensions': 1536,
    }
}

# Nutrition calculation constants
NUTRITION_CONSTANTS = {
    'calories_per_gram': {
        'protein': 4,
        'carbs': 4,
        'fat': 9,
        'alcohol': 7,
    },
    'default_meal_distribution': {
        'breakfast': 0.25,
        'lunch': 0.35,
        'dinner': 0.35,
        'snack': 0.05,
    },
    'macro_ratios': {
        'balanced': {'protein': 0.25, 'carbs': 0.45, 'fat': 0.30},
        'high_protein': {'protein': 0.35, 'carbs': 0.35, 'fat': 0.30},
        'low_carb': {'protein': 0.30, 'carbs': 0.20, 'fat': 0.50},
        'mediterranean': {'protein': 0.20, 'carbs': 0.50, 'fat': 0.30},
    }
}

# Cache configuration for API responses and calculations
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://localhost:6379/1',
        'KEY_PREFIX': 'wellness_nutrition',
        'TIMEOUT': 3600,  # 1 hour default
    }
}

# Cache timeouts for different data types
CACHE_TIMEOUTS = {
    'spoonacular_recipe': 86400,      # 24 hours
    'spoonacular_ingredient': 604800,  # 1 week
    'nutrition_calculation': 3600,    # 1 hour
    'meal_plan': 3600,               # 1 hour
    'user_preferences': 1800,        # 30 minutes
}

# Enhanced Celery Beat Schedule with nutrition tasks
CELERY_BEAT_SCHEDULE = {
    'update-recipe-database': {
        'task': 'nutrition.tasks.update_recipe_database',
        'schedule': 86400.0,  # Daily
    },
    'generate-meal-plans': {
        'task': 'nutrition.tasks.generate_daily_meal_plans',
        'schedule': 3600.0,   # Hourly
    },
    'analyze-nutrition-trends': {
        'task': 'nutrition.tasks.analyze_user_nutrition_trends',
        'schedule': 21600.0,  # Every 6 hours
    },
}

# Recipe image upload settings
RECIPE_IMAGE_UPLOAD_PATH = 'recipes/images/'
MAX_RECIPE_IMAGE_SIZE = 5 * 1024 * 1024  # 5MB

# AI Prompt Templates for consistent nutrition responses
AI_PROMPT_TEMPLATES = {
    'meal_plan_strategy': """
    Analyze this user's health and nutrition profile to create a meal planning strategy:
    
    User Profile:
    - Age: {age}, Gender: {gender}
    - Weight: {weight}kg, Height: {height}cm, BMI: {bmi}
    - Activity Level: {activity_level}
    - Fitness Goal: {fitness_goal}
    - Dietary Preferences: {dietary_preferences}
    - Allergies/Intolerances: {allergies}
    - Cuisine Preferences: {cuisine_preferences}
    - Disliked Ingredients: {disliked_ingredients}
    - Target Calories: {calorie_target}
    - Target Macros: Protein {protein_target}g, Carbs {carb_target}g, Fat {fat_target}g
    
    Create a meal planning strategy that includes:
    1. Recommended meal timing and distribution
    2. Portion size guidelines
    3. Key nutritional focus areas
    4. Suggested meal types for each time of day
    
    Respond in JSON format.
    """,

    'meal_structure_generation': """
    Based on this meal planning strategy, create a detailed daily meal structure:
    
    Strategy: {strategy}
    Date: {date}
    
    Create meals that:
    1. Meet the calorie target (±50 calories)
    2. Balance macronutrients according to targets
    3. Respect dietary preferences and restrictions
    4. Include variety in ingredients and cuisines
    5. Consider meal timing preferences
    
    For each meal, provide:
    - Meal name and type (breakfast/lunch/dinner/snack)
    - Brief description
    - Estimated calories and macros
    - Key ingredients
    - Preparation time estimate
    
    Respond in JSON format with meal structure.
    """,

    'nutrition_analysis': """
    Analyze this user's daily nutrition data and provide insights:
    
    Daily Intake:
    - Calories: {calories} (Target: {calorie_target})
    - Protein: {protein}g (Target: {protein_target}g)
    - Carbs: {carbs}g (Target: {carb_target}g)
    - Fat: {fat}g (Target: {fat_target}g)
    
    User Goals: {fitness_goal}
    Recent Trends: {trends}
    
    Provide:
    1. Key achievements and highlights
    2. Areas for improvement
    3. Specific recommendations
    4. Meal timing or portion adjustments
    
    Keep response encouraging and actionable. Respond in JSON format.
    """
}

# Function calling schemas for OpenAI
OPENAI_FUNCTIONS = {
    'calculate_nutrition': {
        'name': 'calculate_nutrition',
        'description': 'Calculate nutritional information for ingredients or recipes',
        'parameters': {
            'type': 'object',
            'properties': {
                'ingredients': {
                    'type': 'array',
                    'description': 'List of ingredients with quantities',
                    'items': {
                        'type': 'object',
                        'properties': {
                            'name': {'type': 'string'},
                            'quantity': {'type': 'number'},
                            'unit': {'type': 'string'}
                        }
                    }
                },
                'servings': {
                    'type': 'number',
                    'description': 'Number of servings'
                }
            },
            'required': ['ingredients', 'servings']
        }
    },
    'validate_dietary_restrictions': {
        'name': 'validate_dietary_restrictions',
        'description': 'Check if recipe meets dietary restrictions',
        'parameters': {
            'type': 'object',
            'properties': {
                'ingredients': {
                    'type': 'array',
                    'items': {'type': 'string'}
                },
                'dietary_preferences': {
                    'type': 'array',
                    'items': {'type': 'string'}
                },
                'allergies': {
                    'type': 'array',
                    'items': {'type': 'string'}
                }
            },
            'required': ['ingredients', 'dietary_preferences', 'allergies']
        }
    }
}

# Logging configuration with nutrition-specific loggers
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/nutrition.log',
            'formatter': 'verbose',
        },
        'spoonacular': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/spoonacular_api.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'nutrition': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'nutrition.spoonacular': {
            'handlers': ['spoonacular'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'nutrition.ai': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}