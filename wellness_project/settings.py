"""
Django settings for wellness_project project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
from decouple import config
import os

BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='dev-secret-not-for-production')

#OpenAI api key
OPENAI_API_KEY = config('OPENAI_API_KEY', default='')
AI_INSIGHT_DAILY_LIMIT = 3

# Spoonacular API Configuration (ADD THIS TO YOUR .env FILE)
SPOONACULAR_API_KEY = config('SPOONACULAR_API_KEY', default='')
SPOONACULAR_BASE_URL = 'https://api.spoonacular.com'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    'wellness-app-tx2c.onrender.com',
    'wellness-app-frontend.onrender.com',
    'wellness-app-fronend.onrender.com',  # Keep the typo version for compatibility
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
]

CSRF_TRUSTED_ORIGINS = [
     'https://wellness-app-tx2c.onrender.com',
     'https://wellness-app-frontend.onrender.com',
     'https://wellness-app-fronend.onrender.com',  # Keep the typo version for compatibility
     'http://localhost:8080',
     'http://127.0.0.1:8080',
]

# Frontend URL for email links
FRONTEND_URL = "https://wellness-app-fronend.onrender.com"  # Keep the typo version for compatibility

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'django_celery_beat',
    'django.contrib.sites',

    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'rest_framework_simplejwt',
    'django_filters',

    # My apps
    'users',
    'health_profiles',
    'analytics',
    'meal_planning',
    'ai_assistant',

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Move CORS middleware to the top
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS settings
CORS_ALLOW_ALL_ORIGINS = False

CORS_ALLOWED_ORIGINS = [
   'https://wellness-app-fronend.onrender.com',  # Keep the typo version for compatibility
   'https://wellness-app-frontend.onrender.com',  # Correct spelling
   'https://wellness-app-tx2c.onrender.com',
    'http://localhost:8080',
    'http://127.0.0.1:8080',
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

# Allow specific origins for API endpoints with regex patterns
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://.*\.onrender\.com$",
    r"^http://localhost:\d+$",
    r"^http://127\.0\.0\.1:\d+$",
]

CORS_ALLOW_CREDENTIALS = True
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours

# Enhanced CORS settings for better compatibility
CORS_EXPOSE_HEADERS = [
    'content-type',
    'authorization',
    'x-csrftoken',
    'cache-control',
    'expires',
    'etag',
    'last-modified',
]

SESSION_COOKIE_SAMESITE = 'None'
CSRF_COOKIE_SAMESITE    = 'None'
SESSION_COOKIE_SECURE   = True
CSRF_COOKIE_SECURE      = True

# Specify which headers can be included in requests
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
    'x-forwarded-for',
    'x-real-ip',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Trust X-Forwarded-Proto so Django knows the original scheme behind Render's proxy
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
X_FRAME_OPTIONS = 'SAMEORIGIN'

REDIS_URL = config("REDIS_URL", default="")

if REDIS_URL:
    CELERY_BROKER_URL = REDIS_URL
    CELERY_RESULT_BACKEND = REDIS_URL
    CACHE_BACKEND = "django.core.cache.backends.redis.RedisCache"
    CACHE_LOCATION = REDIS_URL
    
    # Redis connection options - simplified for compatibility
    REDIS_CONNECTION_OPTIONS = {}
else:
    CELERY_BROKER_URL = None
    CELERY_RESULT_BACKEND = None
    CACHE_BACKEND = "django.core.cache.backends.locmem.LocMemCache"
    CACHE_LOCATION = ""
    REDIS_CONNECTION_OPTIONS = {}

CACHES = {
    "default": {
        "BACKEND": CACHE_BACKEND,
        "LOCATION": CACHE_LOCATION,
        "TIMEOUT": 3600,
        "KEY_PREFIX": "wellness_nutrition",
        "OPTIONS": REDIS_CONNECTION_OPTIONS,
    }
}

# Celery Task Settings
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Celery Beat Scheduler (for periodic tasks)
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Task execution settings
CELERY_TASK_ALWAYS_EAGER = False
CELERY_TASK_EAGER_PROPAGATES = True
CELERY_TASK_IGNORE_RESULT = False

# Health Summary specific settings
HEALTH_SUMMARY_SETTINGS = {
    'AI_MODEL': 'gpt-3.5-turbo-1106',
    'MAX_RETRIES': 3,
    'RETRY_DELAY': 60,
    'NOTIFICATION_ENABLED': True,
    'AUTO_GENERATE_WEEKLY': True,
    'AUTO_GENERATE_MONTHLY': True,
}


# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'utils.throttling.ResilientUserRateThrottle',
        'utils.throttling.ResilientAnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '600/minute',  # Reasonable production rate
        'anon': '60/minute',   # Reasonable production rate
    },
    'DEFAULT_PAGINATION_CLASS': 'utils.pagination.StandardResultsSetPagination',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'EXCEPTION_HANDLER': 'utils.exceptions.custom_exception_handler',
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=14),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',

    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    # Custom claims
    'JTI_CLAIM': 'jti',
}

ROOT_URLCONF = 'wellness_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
            ],
        },
    },
]

WSGI_APPLICATION = 'wellness_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Prefer DATABASE_URL if provided (Render convention), else PG* vars, else SQLite
DATABASE_URL = config('DATABASE_URL', default=None)

if DATABASE_URL:
    try:
        import dj_database_url  # type: ignore
        DATABASES = {
            'default': dj_database_url.parse(DATABASE_URL, conn_max_age=600, ssl_require=False)
        }
    except Exception:
        # Fallback to manual parse for simple Postgres URLs without adding dependency
        import re
        match = re.match(r'postgresql://([^:]+):([^@]+)@([^:]+):(\d+)/(\w+)', DATABASE_URL)
        if match:
            user, password, host, port, name = match.groups()
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': name,
                    'USER': user,
                    'PASSWORD': password,
                    'HOST': host,
                    'PORT': port,
                }
            }
        else:
            # Last resort: keep existing PG* handling below
            DATABASE_URL = None

if not DATABASE_URL and config('PGDATABASE', default=None) and config('PGUSER', default=None):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME':     config('PGDATABASE'),
            'USER':     config('PGUSER'),
            'PASSWORD': config('PGPASSWORD', default=''),
            'HOST':     config('PGHOST', default='localhost'),
            'PORT':     config('PGPORT', default='5432'),
        }
    }
elif not DATABASE_URL:
    # Safe local/test fallback to SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files for recipe images
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.User'
SITE_ID = 1

# Email Settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development
DEFAULT_FROM_EMAIL = 'noreply@wellnessplatform.com'

# Basic logging to console for production visibility
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
}

# ========================================
# NUTRITION FEATURE CONFIGURATIONS
# ========================================

# Spoonacular API endpoints
SPOONACULAR_ENDPOINTS = {
    'search_recipes': '/recipes/complexSearch',
    'recipe_information': '/recipes/{id}/information',
    'ingredient_search': '/food/ingredients/search',
    'ingredient_information': '/food/ingredients/{id}/information',
    'recipe_nutrition': '/recipes/{id}/nutritionWidget.json',
    'generate_meal_plan': '/mealplanner/generate',
    'connect_user': '/users/connect',
    'add_to_meal_plan': '/mealplanner/{username}/items',
    'shopping_list': '/mealplanner/{username}/shopping-list',
}

# Spoonacular API rate limiting (free tier: 150 requests/day)
SPOONACULAR_RATE_LIMIT = {
    'requests_per_day': 150,
    'requests_per_minute': 10,
    'cache_duration': 3600,  # Cache responses for 1 hour
}

# OpenAI Model Configuration for different nutrition tasks
OPENAI_MODEL_CONFIG = {
    'meal_planning': {
        'model': 'gpt-4-turbo-preview',
        'temperature': 0.7,
        'max_tokens': 2000,
    },
    'recipe_generation': {
        'model': 'gpt-4-turbo-preview',
        'temperature': 0.8,
        'max_tokens': 1500,
    },
    'nutrition_analysis': {
        'model': 'gpt-4-turbo-preview',
        'temperature': 0.3,
        'max_tokens': 1000,
    },
    'embeddings': {
        'model': 'text-embedding-3-small',
        'dimensions': 1536,
    }
}

# Nutrition calculation constants
NUTRITION_CONSTANTS = {
    'calories_per_gram': {
        'protein': 4,
        'carbs': 4,
        'fat': 9,
        'alcohol': 7,
    },
    'default_meal_distribution': {
        'breakfast': 0.25,
        'lunch': 0.35,
        'dinner': 0.35,
        'snack': 0.05,
    },
    'macro_ratios': {
        'balanced': {'protein': 0.25, 'carbs': 0.45, 'fat': 0.30},
        'high_protein': {'protein': 0.35, 'carbs': 0.35, 'fat': 0.30},
        'low_carb': {'protein': 0.30, 'carbs': 0.20, 'fat': 0.50},
        'mediterranean': {'protein': 0.20, 'carbs': 0.50, 'fat': 0.30},
    }
}

# Cache timeouts for different data types
CACHE_TIMEOUTS = {
    'spoonacular_recipe': 86400,      # 24 hours
    'spoonacular_ingredient': 604800,  # 1 week
    'nutrition_calculation': 3600,    # 1 hour
    'meal_plan': 3600,               # 1 hour
    'user_preferences': 1800,        # 30 minutes
}

# Enhanced Celery Beat Schedule with nutrition tasks
CELERY_BEAT_SCHEDULE = {
    'update-recipe-database': {
        'task': 'nutrition.tasks.update_recipe_database',
        'schedule': 86400.0,  # Daily
    },
    'generate-meal-plans': {
        'task': 'nutrition.tasks.generate_daily_meal_plans',
        'schedule': 3600.0,   # Hourly
    },
    'analyze-nutrition-trends': {
        'task': 'nutrition.tasks.analyze_user_nutrition_trends',
        'schedule': 21600.0,  # Every 6 hours
    },
}

# Recipe image upload settings
RECIPE_IMAGE_UPLOAD_PATH = 'recipes/images/'
MAX_RECIPE_IMAGE_SIZE = 5 * 1024 * 1024  # 5MB

# AI Prompt Templates for consistent nutrition responses
AI_PROMPT_TEMPLATES = {
    'meal_plan_strategy': """
    Analyze this user's health and nutrition profile to create a meal planning strategy:
    
    User Profile:
    - Age: {age}, Gender: {gender}
    - Weight: {weight}kg, Height: {height}cm, BMI: {bmi}
    - Activity Level: {activity_level}
    """
}