#!/usr/bin/env python3
"""
Email Setup Script for Wellness Platform

This script helps you configure email verification using SendGrid.
Run this script to set up your email configuration interactively.
"""

import os
import re
import sys
from pathlib import Path

def print_header():
    print("=" * 60)
    print("üåü Wellness Platform - Email Setup Assistant")
    print("=" * 60)
    print("This script will help you configure email verification using SendGrid.")
    print("SendGrid offers 100 free emails per day, perfect for development and small apps.")
    print()

def validate_email(email):
    """Validate email format"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def get_user_input():
    """Collect configuration from user"""
    config = {}
    
    print("üìß Email Configuration Setup")
    print("-" * 30)
    
    # SendGrid API Key
    print("\n1. SendGrid API Key")
    print("   ‚Ä¢ Go to https://app.sendgrid.com/settings/api_keys")
    print("   ‚Ä¢ Create a new API key with 'Mail Send' permissions")
    print("   ‚Ä¢ Copy the API key (it starts with 'SG.')")
    
    while True:
        api_key = input("\nEnter your SendGrid API key: ").strip()
        if api_key.startswith('SG.') and len(api_key) > 10:
            config['SENDGRID_API_KEY'] = api_key
            break
        print("‚ùå Invalid API key. Make sure it starts with 'SG.' and is complete.")
    
    # From Email
    print("\n2. From Email Address")
    print("   ‚Ä¢ This is the email address that will send verification emails")
    print("   ‚Ä¢ Use a professional address like noreply@yourdomain.com")
    
    while True:
        from_email = input("\nEnter the 'from' email address: ").strip()
        if validate_email(from_email):
            config['FROM_EMAIL'] = from_email
            break
        print("‚ùå Please enter a valid email address.")
    
    # Frontend URL
    print("\n3. Frontend URL")
    print("   ‚Ä¢ This is where your frontend is hosted")
    print("   ‚Ä¢ For development: http://localhost:8080")
    print("   ‚Ä¢ For production: https://yourdomain.com")
    
    while True:
        frontend_url = input("\nEnter your frontend URL: ").strip()
        if frontend_url.startswith(('http://', 'https://')):
            config['FRONTEND_URL'] = frontend_url.rstrip('/')
            break
        print("‚ùå Please enter a valid URL starting with http:// or https://")
    
    return config

def create_env_file(config):
    """Create or update .env file"""
    env_path = Path('.env')
    
    # Read existing .env if it exists
    existing_vars = {}
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    existing_vars[key] = value
    
    # Update with new email configuration
    existing_vars.update({
        'EMAIL_BACKEND': 'django.core.mail.backends.smtp.EmailBackend',
        'EMAIL_HOST': 'smtp.sendgrid.net',
        'EMAIL_HOST_USER': 'apikey',
        'EMAIL_HOST_PASSWORD': config['SENDGRID_API_KEY'],
        'EMAIL_PORT': '587',
        'EMAIL_USE_TLS': 'True',
        'EMAIL_USE_SSL': 'False',
        'DEFAULT_FROM_EMAIL': config['FROM_EMAIL'],
        'FRONTEND_URL': config['FRONTEND_URL']
    })
    
    # Write updated .env file
    with open(env_path, 'w') as f:
        f.write("# Wellness Platform Configuration\n")
        f.write("# Generated by setup_email.py\n\n")
        
        # Email settings first
        f.write("# Email Configuration (SendGrid)\n")
        email_vars = [
            'EMAIL_BACKEND', 'EMAIL_HOST', 'EMAIL_HOST_USER', 'EMAIL_HOST_PASSWORD',
            'EMAIL_PORT', 'EMAIL_USE_TLS', 'EMAIL_USE_SSL', 'DEFAULT_FROM_EMAIL'
        ]
        for var in email_vars:
            if var in existing_vars:
                f.write(f"{var}={existing_vars[var]}\n")
        
        f.write(f"\n# Frontend URL\nFRONTEND_URL={existing_vars['FRONTEND_URL']}\n\n")
        
        # Other existing variables
        f.write("# Other Configuration\n")
        for key, value in existing_vars.items():
            if key not in email_vars and key != 'FRONTEND_URL':
                f.write(f"{key}={value}\n")
        
        # Add missing essential variables if they don't exist
        essential_vars = {
            'SECRET_KEY': 'your-secret-key-here-change-this-in-production',
            'DEBUG': 'True'
        }
        
        for key, default_value in essential_vars.items():
            if key not in existing_vars:
                f.write(f"{key}={default_value}\n")
    
    print(f"\n‚úÖ Configuration saved to {env_path}")

def test_email_config():
    """Test email configuration"""
    print("\nüß™ Testing Email Configuration")
    print("-" * 30)
    
    # Set up Django environment
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'wellness_project.settings')
    
    try:
        import django
        django.setup()
        
        from django.core.mail import send_mail
        from django.conf import settings
        
        print("‚úÖ Django configuration loaded successfully")
        print(f"üìß Email backend: {settings.EMAIL_BACKEND}")
        print(f"üè† SMTP host: {settings.EMAIL_HOST}")
        print(f"üë§ From email: {settings.DEFAULT_FROM_EMAIL}")
        
        # Test email sending (optional)
        test_email = input("\nWould you like to send a test email? (y/N): ").strip().lower()
        if test_email == 'y':
            to_email = input("Enter your email address for the test: ").strip()
            if validate_email(to_email):
                try:
                    send_mail(
                        subject="Wellness Platform - Email Test",
                        message="If you receive this email, your email configuration is working correctly!",
                        from_email=settings.DEFAULT_FROM_EMAIL,
                        recipient_list=[to_email],
                        fail_silently=False
                    )
                    print("‚úÖ Test email sent successfully!")
                except Exception as e:
                    print(f"‚ùå Failed to send test email: {e}")
            else:
                print("‚ùå Invalid email address for test")
        
    except Exception as e:
        print(f"‚ùå Error testing configuration: {e}")
        print("Please check your .env file and try running the Django server to verify configuration.")

def print_next_steps():
    """Print next steps for the user"""
    print("\nüéâ Email Setup Complete!")
    print("=" * 60)
    print("Your email verification is now configured. Here's what to do next:")
    print()
    print("1. üìß Verify your SendGrid account:")
    print("   ‚Ä¢ Complete domain authentication in SendGrid dashboard")
    print("   ‚Ä¢ This improves email deliverability")
    print()
    print("2. üöÄ Start your development server:")
    print("   python manage.py runserver")
    print()
    print("3. üß™ Test user registration:")
    print("   ‚Ä¢ Register a new user account")
    print("   ‚Ä¢ Check your email for the verification link")
    print()
    print("4. üîß For production deployment:")
    print("   ‚Ä¢ Set DEBUG=False in your .env file")
    print("   ‚Ä¢ Use your actual domain name in FRONTEND_URL")
    print("   ‚Ä¢ Configure proper DNS records for your domain")
    print()
    print("üìö Documentation: https://docs.sendgrid.com/")
    print("üÜò Need help? Check the README.md file")
    print("=" * 60)

def main():
    """Main setup function"""
    print_header()
    
    # Check if we're in the right directory
    if not Path('manage.py').exists():
        print("‚ùå Error: This script must be run from the project root directory.")
        print("   Make sure you're in the same folder as manage.py")
        sys.exit(1)
    
    try:
        # Get configuration from user
        config = get_user_input()
        
        # Create .env file
        create_env_file(config)
        
        # Test configuration
        test_email_config()
        
        # Show next steps
        print_next_steps()
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå An error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()